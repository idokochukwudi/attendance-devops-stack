// Jenkins Declarative Pipeline starts here
pipeline {
    agent any  // This means Jenkins can run the pipeline on any available agent

    stages {
        // Stage 1: Checkout the Git repository
        stage('Checkout Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/idokochukwudi/attendance-devops-stack.git'
            }
        }

        // Stage 2: Load environment variables from a .env file stored in Jenkins credentials
        stage('Load Environment Variables') {
            steps {
                withCredentials([file(credentialsId: 'attendance-env', variable: 'DOTENV_FILE')]) {
                    script {
                        def envVars = readFile(DOTENV_FILE).split("\n")
                        for (line in envVars) {
                            if (line.trim() && !line.startsWith("#")) {
                                def parts = line.split("=")
                                if (parts.length == 2) {
                                    env[parts[0].trim()] = parts[1].trim()
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Verify Files') {
            steps {
                dir('source') {
                     sh 'ls -la'
                }
            }
        }


        // Stage 3: Build the Docker services using docker-compose
        stage('Build Services') {
            steps {
                dir('source') { // Ensure you are in the correct folder containing docker-compose.yml
                    sh 'docker-compose build'
                }
            }
        }

        // Stage 4: Deploy the Docker stack (containers) in detached mode
        stage('Deploy Stack') {
            steps {
                sh 'docker-compose up -d'
            }
        }

        // Stage 5: Verify that containers are running
        stage('Verify Running Containers') {
            steps {
                sh 'docker ps'
            }
        }
    }

    // Post-build actions
    post {
        success {
            echo '✅ Deployment completed successfully!'
        }
        failure {
            echo '❌ Deployment failed. Please check the logs.'
        }
    }
}
