pipeline {
    agent any  // Runs the pipeline on any available agent

    environment {
        // Define path to .env file
        ENV_VARS = '.env'
    }

    stages {

        stage('Checkout Code') {
            steps {
                script {
                    // Clone the source code from GitHub
                    git branch: 'main', url: 'https://github.com/idokochukwudi/attendance-devops-stack.git'
                }
            }
        }

        stage('Check Docker Installation') {
            steps {
                script {
                    // Verify that Docker is installed on the Jenkins agent
                    sh '''
                        if ! command -v docker > /dev/null 2>&1; then
                            echo "Docker not found. Please install Docker."
                            exit 1
                        else
                            echo "Docker is installed."
                            docker --version
                        fi
                    '''
                }
            }
        }

        stage('Check Docker Compose Installation') {
            steps {
                script {
                    // Verify that Docker Compose is installed on the Jenkins agent
                    sh '''
                        if ! command -v docker-compose > /dev/null 2>&1; then
                            echo "Docker Compose not found. Please install Docker Compose."
                            exit 1
                        else
                            echo "Docker Compose is installed."
                            docker-compose --version
                        fi
                    '''
                }
            }
        }

        stage('Check Jenkins Docker Access') {
            steps {
                script {
                    // Ensure the Jenkins user (or executing user) has permission to run Docker commands
                    sh '''
                        if ! groups $(whoami) | grep -q "\\bdocker\\b"; then
                            echo "User $(whoami) does not have Docker group permissions."
                            echo "Please add user to Docker group and restart Jenkins."
                            exit 1
                        else
                            echo "User $(whoami) has Docker group permissions."
                        fi
                    '''
                }
            }
        }

        stage('Load Environment Variables') {
            steps {
                script {
                    // Load environment variables from the .env file into the current shell session
                    sh '''
                        set -o allexport
                        . $ENV_VARS
                        set +o allexport
                    '''
                }
            }
        }

        stage('Validate Docker Compose File') {
            steps {
                script {
                    // Check syntax and validate the structure of docker-compose.yml
                    sh 'docker-compose -f docker-compose.yml config'
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    // Build all Docker images defined in docker-compose.yml
                    sh 'docker-compose -f docker-compose.yml build'
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    // Run test commands inside the specified service container
                    sh 'docker-compose -f docker-compose.yml run --rm your_service_name npm test'  
                    // NOTE: Replace 'your_service_name' with the correct service name
                }
            }
        }

        stage('Deploy Application') {
            steps {
                script {
                    // Start all services as background containers
                    sh 'docker-compose -f docker-compose.yml up -d'
                }
            }
        }

        stage('Post-Deployment Health Check') {
            steps {
                script {
                    // Wait briefly then perform a health check to verify application is running
                    sh '''
                        sleep 10
                        if ! curl --fail http://localhost:8080/health; then
                            echo "Health check failed!"
                            exit 1
                        else
                            echo "Health check passed."
                        fi
                    '''
                }
            }
        }
    }

    post {
        success {
            // Actions to take if the pipeline succeeds
            echo '‚úÖ Pipeline completed successfully!'
        }
        failure {
            // Actions to take if the pipeline fails
            echo '‚ùå Pipeline failed. Check the logs above for errors.'
        }
        always {
            // Actions that should always run regardless of pipeline outcome
            echo 'üßπ Cleaning up resources...'
        }
    }
}
