// Define environment variables (optional here, but helpful if needed later)
pipeline {
    agent any

    environment {
        // Define where the .env file is located
        ENV_FILE = "${WORKSPACE}/.env"
    }

    stages {

        // Stage 1: Checkout code from GitHub
        stage('Checkout Code') {
            steps {
                script {
                    git branch: 'main', url: 'https://github.com/idokochukwudi/attendance-devops-stack.git'
                }
            }
        }

        // Stage 2: Check if Docker is installed
        stage('Check Docker Installation') {
            steps {
                script {
                    sh '''
                        if command -v docker >/dev/null 2>&1; then
                          echo "Docker is installed."
                          docker --version
                        else
                          echo "Docker is not installed."
                          exit 1
                        fi
                    '''
                }
            }
        }

        // Stage 3: Check if Docker Compose is installed
        stage('Check Docker Compose Installation') {
            steps {
                script {
                    sh '''
                        if command -v docker-compose >/dev/null 2>&1; then
                          echo "Docker Compose is installed."
                          docker-compose --version
                        else
                          echo "Docker Compose is not installed."
                          exit 1
                        fi
                    '''
                }
            }
        }

        // Stage 4: Check if Jenkins user can access Docker
        stage('Check Jenkins Docker Access') {
            steps {
                script {
                    sh '''
                        if groups $(whoami) | grep -q docker; then
                          echo "User $(whoami) has Docker group permissions."
                        else
                          echo "User $(whoami) does not have Docker permissions."
                          exit 1
                        fi
                    '''
                }
            }
        }

        // Stage 5: Load Environment Variables from .env
        stage('Load Environment Variables') {
            steps {
                script {
                    // Safely check and load .env variables into Jenkins environment
                    sh '''
                        cd $WORKSPACE
                        if [ -f ".env" ]; then
                          echo "Loading environment variables from .env file..."
                          set -o allexport
                          . .env
                          set +o allexport
                        else
                          echo ".env file not found!"
                          exit 1
                        fi
                    '''
                }
            }
        }

        // Stage 6: Validate docker-compose.yml syntax
        stage('Validate Docker Compose File') {
            steps {
                script {
                    sh '''
                        cd $WORKSPACE
                        docker-compose config
                    '''
                }
            }
        }

        // Stage 7: Build Docker images
        stage('Build Docker Images') {
            steps {
                script {
                    sh '''
                        cd $WORKSPACE
                        docker-compose build
                    '''
                }
            }
        }

        // Stage 8: Run Tests (optional if you have tests defined)
        stage('Run Tests') {
            steps {
                script {
                    sh '''
                        cd $WORKSPACE
                        docker-compose run --rm app npm test
                    '''
                }
            }
        }

        // Stage 9: Deploy the application
        stage('Deploy Application') {
            steps {
                script {
                    sh '''
                        cd $WORKSPACE
                        docker-compose up -d
                    '''
                }
            }
        }

        // Stage 10: Post-deployment health check (simple HTTP check example)
        stage('Post-Deployment Health Check') {
            steps {
                script {
                    sh '''
                        echo "Waiting for application to start..."
                        sleep 10
                        curl -f http://localhost:3000/ || (echo "Health check failed!" && exit 1)
                    '''
                }
            }
        }
    }

    // Post block: Always clean up or report status
    post {
        success {
            echo '‚úÖ Pipeline completed successfully!'
        }
        failure {
            echo '‚ùå Pipeline failed. Check the logs above for errors.'
        }
        always {
            echo 'üßπ Cleaning up resources...'
        }
    }
}
